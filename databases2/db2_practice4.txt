Extensible hash table
---------------------
The size of the bucket array (directory) is always a power of 2.
Let's suppose we can put two records into a block, k=4 (the hash function computes k bits), 
i=1 (the bucket numbers use the first i bits); j (in the nub of the blocks) indicates how many bits of 
the hash function's sequence is used in this block. 

i=1
     ----      0001
 0   | -|--->  ----1
     |  |     
 1   | -|--->  1001
     ----      1100
               ----1 
  
  bucket dir   blocks

Insert the following values into the hash table 

0011, 0110, 1011, 0111, 1110, 1111, 0100


A litthe hint:
-------------

To insert a record with search key K , we compute h(K ), take the first i bits of this bit sequence, 
and go to the entry of the bucket directory indexed by these i bits, then follow the pointer in this entry
and arrive at a block B. If there is no room in the block B we do the following:
1. If j < i we split B into two; distribute records in B to the two blocks based on the (j+1)st bit;
   put j+1 into the block's nub; adjust the pointers in the bucket directory 
2. If j = i we increment i by 1; double the length of the bucket directory; put new pointers into the array;
   finally we proceed to split block B as in case 1.



Linear hash table
-----------------
Let's suppose we can put two records into a block and the blocks contain the following records:

0000   0101
1110   
----   ----   
 0      1    

n = 2 (the current number of buckets); i = 1 (we use the last i bits from the sequence)
r/n = 2.4 (predefined threshold, where r is the current number of records)

Insert the following values into the hash table 

0001, 0110, 1011, 0111, 1100, 1111, 0100


A little hint:
-------------

To insert a record with search key K , we compute h(K ), take the last i bits of this bit sequence.
If a bucket with this number (last i bits) exists, we put the record in it. If there is no room
in the last block of this bucket, we chain a new block to the bucket.
If the bucket with this number (last i bits) doesn't exist, we put the record in the bucket
which differs only in the first bit.
If r/n is greater than a threshold, we add a new bucket to the structure.
If n exceeds 2**i we increment i by 1. 



Bitmap index
------------

EMPNO ENAME   SALARY  JOB       HIREDATE   DEPTNO
---------------------------------------------------
1     SMITH     800   CLERK        1980     20   
2     ALLEN    1600   SALESMAN     1981     30	   
3     WARD     1250   SALESMAN     1981     30	   
4     JONES    2975   MANAGER      1981     20	   
5     MARTIN   1250   SALESMAN     1981     30	   
6     BLAKE    2850   MANAGER      1981     30	   
7     CLARK    2450   MANAGER      1981     10	   
8     SCOTT    3000   ANALYST      1982     20	   
9     KING     5000   PRESIDENT    1981     10	   
10    TURNER   1500   SALESMAN     1981     30	   
11    ADAMS    1100   CLERK        1983     20	   
12    JAMES     950   CLERK        1981     30	   
13    FORD     3000   ANALYST      1981     20	   
14    MILLER   1300   CLERK        1982     10	 

Create a bitmap index for the deptno column of the EMP table and give the bit vectors.

Create the bit vectors for the following query and simulate the evaluation:
 
- Give the name of employees who entered in 1981 (hiredate) and whose job is CLERK,
  or work for department 20 and his job is MANAGER.

Compress the following bit vector with run-length encoding (see in Text Book)
0000000000000000000000010000000101

Decompress the following run-length encoded bit vector:
1111010101001011


Oracle indexes
--------------

Give the tables (table_name) which has a column indexed in descending order.
See the name of the column. Why is it so strange? -> DBA_IND_EXPRESSIONS

Give the indexes (index name) which are composite and have at least 9 columns (expressions).

Give the name of bitmap indexes on table NIKOVITS.CUSTOMERS. (ULLMAN database only)

Give the indexes which has at least 2 columns and are function-based.

Give for one of the above indexes the expression for which the index was created.

---------------------------------------------------------------------------------------
Write a PL/SQL procedure which prints out the names and sizes (in bytes) of indexes created
on the parameter table.
CREATE OR REPLACE PROCEDURE list_indexes(p_owner VARCHAR2, p_table VARCHAR2) IS
...
Test:
-----
set serveroutput on
execute list_indexes('nikovits', 'emp');


