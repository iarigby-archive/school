Recursion in SQL  (START WITH, CONNECT BY)
------------------------------------------

SELECT ... FROM ... WHERE ...
START WITH condition
CONNECT BY condition

This is a special type SQL query by which we can query tree structures (graphs).
We identify the root of the tree with START WITH condition.
We identify the parent-child relationship with CONNECT BY condition.
In CONNECT BY we have to use the PRIOR keyword to distinguish the column of a parent and a child node (row).

START WITH -> finds root node (or root nodes)
CONNECT BY -> relationship between parent and child rows (we should use PRIOR for parent rows)

Steps of evaluation in recursive queries:
-----------------------------------------

1. START WITH selects root nodes (rows)

2. CONNECT BY finds children of roots

3. Finds ancestors with a depth first strategy

4. WHERE filters rows. If condition is TRUE, record remains in result set.

5. Returns rows in preorder traversal.

If a SELECT uses CONNECT BY, take care with JOINS.


We can use several conditions after CONNECT BY. eg.
CONNECT BY PRIOR empno = mgr AND sal > comm
empno -> parent node or record (see PRIOR), other columns -> child node (record)

PRIOR is a unary operator
-------------------------
We must use PRIOR in CONNECT BY clause at least once, otherwise we cannot express the
parent-child relationship.

LEVEL pszeudo column
--------------------
It returns 1 for root nodes, 2 for their children, etc.

Example:
--------
SELECT   LPAD(' ', 2*(LEVEL-1)) || ename, empno, mgr, job, LEVEL
FROM nikovits.emp
START WITH   job='PRESIDENT'
CONNECT BY  PRIOR empno = mgr;

Ordering siblings:
ORDER BY  -> SIBLINGS [NULLS FIRST | NULLS LAST] 

Example:
--------
SELECT   LPAD(' ', 2*(LEVEL-1)) || ename, empno, mgr, job, LEVEL
FROM nikovits.emp
START WITH   job='PRESIDENT'
CONNECT BY  PRIOR empno = mgr
ORDER SIBLINGS BY ename;  --  [NULLS FIRST | LAST]

We can use aggregation and grouping in these queries.

Example:
--------
Give the sum money of the grandchildren of KAIN.

SELECT   SUM(money) -- LPAD(' ', 2*(LEVEL-1)) || name, parent, money
FROM nikovits.parentof
WHERE LEVEL = 3
START WITH  name='KAIN'
CONNECT BY  PRIOR name = parent;

A new table: ParentOf(name, parent, money, city)
------------------------------------------------
CREATE TABLE ParentOf(name, parent, money, city)
AS SELECT nev, decode(apja, 'NINCS', 'NO', apja), vagyon, varos FROM nikovits.vagyonok;
-- grant select on parentof to public;

Compare the following queries and notice the role of PRIOR operator.

-- ABEL's all descendants
SELECT  LPAD(' ', 2*(LEVEL-1)) || name, parent, money
FROM nikovits.parentof
WHERE name like '%%'     -- we could omit WHERE clause
START WITH  name='ABEL'
CONNECT BY  PRIOR name = parent;

-- ABEL's descendants whose all ancestors have a letter 'A' in his name
SELECT  LPAD(' ', 2*(LEVEL-1)) || name, parent, money
FROM nikovits.parentof
WHERE name like '%%'
START WITH  name='ABEL'
CONNECT BY  PRIOR name = parent and prior name like '%A%';

-- ABEL's descendants who and whose all ancestors have a letter 'A' in his name
-- No PRIOR in second condition of CONNECT BY
SELECT  LPAD(' ', 2*(LEVEL-1)) || name, parent, money
FROM nikovits.parentof
WHERE name like '%%'
START WITH  name='ABEL'
CONNECT BY  PRIOR name = parent and name like '%A%';


CONNECT_BY_ROOT operator
------------------------
At any level we can refer to a column of the root node with this operator.

Example:
--------
Give the names whose city is the same as ADAM's city.

SELECT  LPAD(' ', 2*(LEVEL-1)) || name, parent, city, CONNECT_BY_ROOT city
FROM nikovits.parentof
WHERE city = CONNECT_BY_ROOT city
START WITH  name='ADAM'
CONNECT BY  PRIOR name = parent;


SYS_CONNECT_BY_PATH function: SYS_CONNECT_BY_PATH(column, char)
----------------------------------------------------------------
SYS_CONNECT_BY_PATH concatenates the given column of the nodes from root to actual node.
Second parameter is the delimeter character (or string).

Example:
--------
SELECT  name, SYS_CONNECT_BY_PATH(name,'.'), SYS_CONNECT_BY_PATH(city,'.')
FROM nikovits.parentof
START WITH  name='ADAM'
CONNECT BY  PRIOR name = parent;


If the graph has a cycle we have to use NOCYCLE keyword.


A new example
-------------
CREATE TABLE Flight(airline, orig, dest, cost)
AS SELECT legitarsasag, honnan, hova, koltseg from nikovits.jaratok;
GRANT select on flight to public;


-- or CREATE an empty table then insert rows:
CREATE TABLE Flight(airline VARCHAR2(10), orig VARCHAR2(15), dest VARCHAR2(15), cost NUMBER);

INSERT INTO flight VALUES('Lufthansa', 'San Francisco', 'Denver', 1000);
INSERT INTO flight VALUES('Lufthansa', 'San Francisco', 'Dallas', 10000);
INSERT INTO flight VALUES('Lufthansa', 'Denver', 'Dallas', 500);
INSERT INTO flight VALUES('Lufthansa', 'Denver', 'Chicago', 2000);
INSERT INTO flight VALUES('Lufthansa', 'Dallas', 'Chicago', 600);
INSERT INTO flight VALUES('Lufthansa', 'Dallas', 'New York', 2000);
INSERT INTO flight VALUES('Lufthansa', 'Chicago', 'New York', 3000);
INSERT INTO flight VALUES('Lufthansa', 'Chicago', 'Denver', 2000);

-- There is a cycle in the graph of Flight table. 
-- If we delete the last row, there will be no cycle in the graph.

delete from flight where orig='Chicago' and dest='Denver';

Example:
--------
Which cities can be reached from San Francisco?

SELECT LPAD(' ', 4*level) ||orig, dest, level-1 turnovers
FROM flight
START WITH orig = 'San Francisco'
CONNECT BY PRIOR dest = orig;

The previous SELECT doesn't work if there is a cycle in the graph.
Use the following instead (-> NOCYCLE):

SELECT LPAD(' ', 4*level) ||orig, dest, level-1 turnovers
FROM flight
START WITH orig = 'San Francisco'
CONNECT BY NOCYCLE PRIOR dest = orig;


Other pszeudo columns:

CONNECT_BY_ISCYCLE: returns 1 if actual row has a child that is an ancestor of it too.
CONNECT_BY_ISLEAF:  returns 1 if actual row has no child. (or has only child that was an ancestor)

Example:
------
SELECT LPAD(' ', 2*level) ||orig, dest, level-1 turnovers,
  CONNECT_BY_ISCYCLE, CONNECT_BY_ISLEAF
FROM flight
START WITH orig = 'San Francisco'
CONNECT BY NOCYCLE PRIOR dest = orig;


Example:
--------
List the routes from San Francisco.

SELECT CONNECT_BY_ROOT orig AS first, dest AS final_dest, LEVEL, 
       SYS_CONNECT_BY_PATH(orig, '->')||'->'||dest "route"        -- we concatenate the final dest at the end
FROM flight                                                       -- of origs
START WITH orig='San Francisco'
CONNECT BY NOCYCLE PRIOR dest = orig
ORDER BY LEVEL;



DATALOG programs
-----------------
Datalog is a logical query language (Data Logic). See textbook (Ullman ch. 5.3, 5.4 and 10.2)

Let's see relation Reaches(x,y) which answers the following question (query).
For what pairs of cities (x, y) is it possible to get from city x to city y by taking one or more flights?

A recursive DATALOG program for the REACHES table:
--------------------------------------------------
Reaches(X,Y)  <--  Flight(X,Y)
Reaches(X,Y)  <--  Reaches(X,Z) AND Reaches(Z,Y) AND X <> Y

Most DBMS-s allow only linear recursion in recursive queries, which means:
no rule has more than one subgoal that is mutually recursive with the head.
(See mutual recursion in textbook, ch. 10.2)
In the previous datalog program the second rule violates this requirement.

The datalog program below contains only linear recursion:

Reaches(X,Y)  <--  Flight(X,Y)
Reaches(X,Y)  <--  Flight(X,Z) AND Reaches(Z,Y) AND X <> Y


SQL query
---------

WITH  reaches(orig, dest) AS 
 (
  SELECT orig, dest FROM flight
   UNION ALL
  SELECT flight.orig, reaches.dest FROM flight, reaches
  WHERE flight.dest = reaches.orig AND flight.orig <> reaches.dest
  )
  CYCLE orig SET cycle_yes TO 'Y' DEFAULT 'N' 
SELECT  distinct orig, dest FROM reaches order by 1;


Create the Reaches table from flight with CONNECT BY query:
-----------------------------------------------------------

SELECT distinct CONNECT_BY_ROOT orig AS orig, dest AS dest
FROM flight
WHERE CONNECT_BY_ROOT orig <> dest
START WITH 1=1                    -- we start recursion from all nodes
CONNECT BY NOCYCLE PRIOR dest = orig
ORDER BY orig, dest;



