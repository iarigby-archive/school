select * from nikovits.emp;

---------------------------------------------
---------------------------------------------
-- practice 0:

/*
Write a procedure which prints out (based on table NIKOVITS.PARENTOF) the names 
of people who has a richer descendant than him/her. 
(That is, at least one descendant has more money than the person.)
*/

select * from nikovits.parentof;

create or replace procedure rich_descendant is
    cnt integer;
begin
    for rec in (select name, money from nikovits.parentof) loop
        select count(*) into cnt from nikovits.parentof
        where money > rec.money
        start with name = rec.name connect by prior name = parent;
        
        if cnt > 0 then
            dbms_output.put_line(rec.name);
        end if;
    end loop;
end;
/    

set serveroutput on
execute rich_descendant();

/*
Write a procedure which prints out (based on table NIKOVITS.PARENTOF) 
the name, money and average money of the descendants for whom it is true,
that the average money of the descendants is greater than the person's money.
The program should print out 3 pieces of data for every row: 
Name, Money, Avg_Money_of_Descendants 
*/

create or replace procedure rich_avg_descendant is
    cnt integer;
    average integer;
begin
    for rec in (select name, money from nikovits.parentof) loop
        select count(*), avg(money) into cnt, average from nikovits.parentof
        where money > rec.money
        start with name = rec.name connect by prior name = parent;
        
        if cnt > 0 then
            dbms_output.put_line(rec.name||' '||rec.money||' '||average);  
        end if;
    end loop;
end;
/

set serveroutput on
execute rich_avg_descendant();

/*
Write a procedure which prints out (based on table NIKOVITS.FLIGHT)
the nodes (cities) of the directed cycles, 
which start and end with the parameter city.
Example output: Dallas-Chicago-Denver-Dallas
*/

select * from nikovits.flight;

SELECT  name, SYS_CONNECT_BY_PATH(name,'.'), SYS_CONNECT_BY_PATH(city,'.')
FROM nikovits.parentof
START WITH  name='ADAM'
CONNECT BY  PRIOR name = parent;

create or replace procedure find_cycle(p_node varchar2) is
    result varchar2(120);
begin
    for rec in
        (select route from
            (SELECT CONNECT_BY_ROOT orig AS first, dest AS final_dest, LEVEL, 
                   SYS_CONNECT_BY_PATH(orig, '-')||'-'||dest route       -- we concatenate the final dest at the end
            FROM nikovits.flight
            START WITH orig= p_node
            CONNECT BY NOCYCLE PRIOR dest = orig
            ORDER BY LEVEL)
        where first = final_dest) loop
       
       result := substr(rec.route, 2);
       
       dbms_output.put_line(result);
   
   end loop;
end;
/

set serveroutput on
execute find_cycle('Denver');

select route from
    (SELECT CONNECT_BY_ROOT orig AS first, dest AS final_dest, LEVEL, 
           SYS_CONNECT_BY_PATH(orig, '-')||'-'||dest route       -- we concatenate the final dest at the end
    FROM nikovits.flight
    START WITH orig='New York'
    CONNECT BY NOCYCLE PRIOR dest = orig
    ORDER BY LEVEL)
where first = final_dest;    

/*
Write a procedure which prints out 
(based on table NIKOVITS.PARENTOF) the name and city of people
who have at  least two ancestors with the same city 
as the person's city.
*/

select * from nikovits.parentof;

SELECT name, city, LEVEL,
        SYS_CONNECT_BY_PATH(name, '-') ancestors,
        SYS_CONNECT_BY_PATH(city, '-') cities     -- we concatenate the final dest at the end
FROM nikovits.parentof
START WITH name='ADAM'
CONNECT BY NOCYCLE PRIOR name = parent;
--ORDER BY LEVEL;

select * from nikovits.parentof;

create or replace procedure ancestor2 is
    cnt integer;
    pattern varchar2(120);
begin
    for rec in (SELECT name, city,
                SYS_CONNECT_BY_PATH(city, '-') cities
        FROM nikovits.parentof
        START WITH name='ADAM'
        CONNECT BY NOCYCLE PRIOR name = parent) loop
    
         cnt := regexp_count(rec.cities, rec.city);
         
         if cnt >= 3 then
            dbms_output.put_line(rec.name);
         end if;
         
    end loop;
    
end;
/

set serveroutput on
execute ancestor2();